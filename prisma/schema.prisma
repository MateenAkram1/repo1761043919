generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

enum UserRole {
  PATIENT
  DOCTOR
  STAFF_ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?
  userRole               UserRole  @default(PATIENT)
  phone                  String?

  teamMembers      TeamMember[]
  accounts         Account[]
  sessions         Session[]
  invitations      Invitation[]
  patientProfile   Patient?
  doctorProfile    Doctor?
  appointments     Appointment[]
  payments         Payment[]
  auditLogs        AuditLog[]
}

model Team {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  defaultRole     Role         @default(MEMBER)
  billingId       String?
  billingProvider String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  members         TeamMember[]
  invitations     Invitation[]
  apiKeys         ApiKey[]

  @@index([billingId])
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id             String   @id @default(uuid())
  teamId         String
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(uuid())
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(uuid())
  billingScheme String
  currency      String
  serviceId     String
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model jackson_store {
  key        String    @id(map: "_jackson_store_key") @db.VarChar(1500)
  value      String
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  modifiedAt DateTime? @db.Timestamp(6)
  namespace  String?   @db.VarChar(256)

  jackson_index jackson_index[]

  @@index([namespace], map: "_jackson_store_namespace")
  @@ignore
}

model jackson_index {
  id       Int    @id(map: "_jackson_index_id") @default(autoincrement())
  key      String @db.VarChar(1500)
  storeKey String @db.VarChar(1500)

  store jackson_store @relation(fields: [storeKey], references: [key], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
  @@ignore
}

model jackson_ttl {
  key       String @id(map: "jackson_ttl_key") @db.VarChar(1500)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
  @@ignore
}

// ToothDoctor specific models

model Patient {
  id              String   @id @default(uuid())
  userId          String   @unique
  dateOfBirth     DateTime?
  address         String?
  emergencyContact String?
  medicalHistory  String?  @db.Text
  allergies       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@index([userId])
}

model Doctor {
  id            String   @id @default(uuid())
  userId        String   @unique
  specialty     String
  bio           String?  @db.Text
  qualifications String? @db.Text
  licenseNumber String?
  yearsOfExperience Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  availability      DoctorAvailability[]

  @@index([userId])
}

model DoctorAvailability {
  id          String   @id @default(uuid())
  doctorId    String
  dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
  startTime   String   // Format: "09:00"
  endTime     String   // Format: "17:00"
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
}

model DentalService {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  appointments Appointment[]
}

model Appointment {
  id               String            @id @default(uuid())
  patientId        String
  doctorId         String
  serviceId        String?
  userId           String
  appointmentDate  DateTime
  startTime        String
  endTime          String
  status           AppointmentStatus @default(PENDING)
  reasonForVisit   String?           @db.Text
  notes            String?           @db.Text
  doctorNotes      String?           @db.Text
  cancelledAt      DateTime?
  cancelReason     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())

  patient Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor         @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  service DentalService? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment?

  @@index([patientId])
  @@index([doctorId])
  @@index([serviceId])
  @@index([userId])
  @@index([appointmentDate])
}

model Payment {
  id               String        @id @default(uuid())
  userId           String
  appointmentId    String?       @unique
  amount           Decimal       @db.Decimal(10, 2)
  currency         String        @default("usd")
  status           PaymentStatus @default(PENDING)
  paymentMethod    String?
  stripePaymentId  String?       @unique
  stripeCustomerId String?
  description      String?
  metadata         Json?
  paidAt           DateTime?
  refundedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([appointmentId])
  @@index([stripePaymentId])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  entity      String
  entityId    String?
  changes     Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entity])
  @@index([createdAt])
}
